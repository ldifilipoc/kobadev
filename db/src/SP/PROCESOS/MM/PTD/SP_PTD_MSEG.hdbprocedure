PROCEDURE "SP_PTD_MSEG"( )
    LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   DECLARE MBLNR_DESDE BIGINT;
   DECLARE MBLNR_HASTA BIGINT;
   DECLARE EJERCICIO INT = YEAR(CURRENT_DATE);
   DECLARE PERIODO INT = MONTH(CURRENT_DATE);
   
   --DECLARE FECHA_INICIO DATE = ADD_MONTHS(NEXT_DAY(LAST_DAY(CURRENT_DATE)),-1);
   DECLARE FECHA_INICIO DATE = ADD_DAYS(CURRENT_DATE,-15);
   DECLARE FECHA_FIN DATE = CURRENT_DATE;
   DECLARE FECHA_DIA_ANT DATE = ADD_DAYS(CURRENT_DATE,-1);
   
   --substring(A.CD_MBLNR,1,6) Subnumero: Agrupa en lotes de máximo 10 mil los registos a cargar
   DECLARE CURSOR cur_Documentos_MM FOR 
	   	SELECT substring(A.CD_MBLNR,1,6) Subnumero, Min(A.CD_MBLNR) Desde, Max(A.CD_MBLNR) Hasta, Count(A.CD_MBLNR) Cantidad, A.CD_EJERCICIO , ETl.PERIODO, ETL.PART_ID
		FROM DIM_DOCMM A 
		INNER JOIN ETL_PARTICIONES ETL 
				ON ETL.PERIODO = TO_VARCHAR(A.FE_BUDAT,'YYYYMM')
				AND ETL.TABLA = 'FT_MSEG'	
		WHERE A.CD_EJERCICIO>2020 AND A.ITEMS =-1
		GROUP BY substring(A.CD_MBLNR,1,6), A.CD_EJERCICIO, ETl.PERIODO, ETL.PART_ID
		ORDER BY substring(A.CD_MBLNR,1,6);
   
   
   DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM TDUMMY;

	FOR cur_Documentos_MM_row AS cur_Documentos_MM DO
	    truncate table STG_ABAP_MSEG;
		CALL SP_STG_MSEG_LOAD_V001(cur_Documentos_MM_row.CD_EJERCICIO,cur_Documentos_MM_row.Desde,cur_Documentos_MM_row.Hasta,'D');
		CALL SP_FT_MSEG_LOAD_V001('D', cur_Documentos_MM_row.PERIODO, cur_Documentos_MM_row.PART_ID);
	END FOR;
	
/*       
      
	SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
	(SELECT MBLNR FROM STG_ABAP_MKPF WHERE MJAHR=:EJERCICIO AND MBLNR>'5000000000' 
	AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
	
	IF (:MBLNR_DESDE IS NULL)  THEN
	
		SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
		(SELECT MBLNR FROM STG_ABAP_MKPF WHERE MJAHR=:EJERCICIO AND MBLNR<'5000000000' 
		AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
	
		IF (:MBLNR_DESDE IS NULL)  THEN
	
			SELECT MIN(CD_MBLNR), MAX(CD_MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
			(SELECT A.CD_MBLNR 
			FROM DIM_DOCMM A 
			LEFT JOIN FT_MSEG B 
				ON A.CD_DW_MKPF=B.CD_DW_MKPF
			WHERE A.CD_EJERCICIO=:EJERCICIO 
				AND A.FE_BUDAT BETWEEN :FECHA_INICIO AND :FECHA_FIN 
				AND B.CD_DW_MKPF 
			IS NULL ORDER BY A.CD_MBLNR);
		
			IF (:MBLNR_DESDE IS NULL)  THEN
			ELSE 
				CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000,PERIODO);
			END IF;
			
		ELSE 
			CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000,PERIODO);
		END IF;
			
	ELSE 
		CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000,PERIODO);
	END IF;
*/

	/*
	
		Actualización de la cantidad recibida según el movimiento de inventario
		Fecha de Ajuste: 29/01/2021
		Motivo: Por Errores de memoria al hacer el JOIN con la tabla MSEG, se actualiza la FT_COMPRA con los dos campos que se requieren de la MSEG.
			y evitar el JOIN con la FT_MSEG.
		Modificado por: Jhonathan Pimienta G. (CORG)
		
	*/


   
   /*	
   SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
   (SELECT MBLNR FROM STG_MKPF WHERE MJAHR=:EJERCICIO AND BUDAT=:FECHA_FIN AND MBLNR>'5000000000' 
   AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
   
   IF (:MBLNR_DESDE IS NULL)  THEN
   
		SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
	    (SELECT MBLNR FROM STG_MKPF WHERE MJAHR=:EJERCICIO AND BUDAT=:FECHA_FIN AND MBLNR<'5000000000' 
		AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
		
		IF (:MBLNR_DESDE IS NULL)  THEN
			
			SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
			(SELECT MBLNR FROM STG_MKPF WHERE MJAHR=:EJERCICIO AND BUDAT=:FECHA_FIN AND MBLNR>'5000000000' 
			AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
			
			IF (:MBLNR_DESDE IS NULL)  THEN
		
				SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
	    		(SELECT MBLNR FROM STG_MKPF WHERE MJAHR=:EJERCICIO AND BUDAT=:FECHA_DIA_ANT AND MBLNR<'5000000000' 
				AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
		   
				IF (:MBLNR_DESDE IS NULL)  THEN
		
					SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
	    			(SELECT MBLNR FROM STG_MKPF WHERE MJAHR=:EJERCICIO AND BUDAT=:FECHA_DIA_ANT AND MBLNR>'5000000000' 
					AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
						
					IF (:MBLNR_DESDE IS NULL)  THEN
		
						SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
	    				(SELECT MBLNR FROM STG_MKPF WHERE MJAHR=:EJERCICIO AND MBLNR>'5000000000' 
						AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
						
						IF (:MBLNR_DESDE IS NULL)  THEN
				
							SELECT MIN(MBLNR), MAX(MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
		    				(SELECT MBLNR FROM STG_MKPF WHERE MJAHR=:EJERCICIO AND MBLNR<'5000000000' 
							AND NOT MBLNR IN (SELECT CD_MBLNR FROM DIM_DOCMM WHERE CD_EJERCICIO=:EJERCICIO) ORDER BY MBLNR);
					
							IF (:MBLNR_DESDE IS NULL)  THEN
				
								SELECT MIN(CD_MBLNR), MAX(CD_MBLNR) INTO MBLNR_DESDE, MBLNR_HASTA FROM 
								(SELECT A.CD_MBLNR FROM DIM_DOCMM A LEFT JOIN FT_MSEG B ON A.CD_DW_MKPF=B.CD_DW_MKPF
								WHERE A.CD_EJERCICIO=:EJERCICIO AND A.FE_BUDAT BETWEEN :FECHA_INICIO AND :FECHA_FIN AND B.CD_DW_MKPF 
								IS NULL ORDER BY A.CD_MBLNR);
							
								IF (:MBLNR_DESDE IS NULL)  THEN
								ELSE 
		    						CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000);
		    					END IF;
    							
    						ELSE 
	    						CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000);
	    					END IF;
	    						
						ELSE 
				    		CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000);
				    	END IF;
						
					ELSE 
						CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000);
					END IF;
						
				ELSE 
					CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000);
				END IF;
		   
			ELSE 
				CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000);
			END IF;
			
		ELSE 
			CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000);
		END IF;
			
	ELSE 
		CALL SP_PTD_MSEG_FULL('F',:EJERCICIO,:MBLNR_DESDE,:MBLNR_HASTA,10000);
	END IF;
	*/

END