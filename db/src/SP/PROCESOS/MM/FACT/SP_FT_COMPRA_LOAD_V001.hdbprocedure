PROCEDURE "SP_FT_COMPRA_LOAD_V001"(pTipoCarga VARCHAR(1))
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN
   /*************************************
	Carga de compras
	Fecha de Creaci칩n: 30/03/2020
	Fecha de Modificaci칩n: 02/04/2020
	Creado por: CORG-MREDONDO
	Modifica:
	Motivo cambio: Manejo de Deltas
	
	Stage table: STG_ABAP_EKPO
	Hecho destino: FT_EKPO
	
	pEBELN_DESDE NVARCHAR(10),pEBELN_HASTA NVARCHAR(10),pFECHA_INICIO NVARCHAR(8),pFECHA_FIN NVARCHAR(8)
   *************************************/
	DECLARE P_BP INT;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM TDUMMY;
    
	 SELECT MAX(CD_DW_BP) INTO P_BP FROM DIM_BPARTNER;
    
    --SELECT MAX(BELNR_HASTA) INTO P_EBELN FROM "DWH_HDI_DB_1"."ETL_CONTROL_CARGUE" WHERE TABLA='FT_COMPRA';
  
	--Se insertan los nuevos BP
	insert into DIM_BPARTNER(CD_DW_BP,CD_BP)
	select  :P_BP + ROW_NUMBER() OVER (ORDER BY LIFNR) ID, LIFNR
	from (select distinct EKKO.LIFNR --Nuevos Proveedores
		  from STG_ABAP_EKKO EKKO
		  left join DIM_BPARTNER BP
			ON EKKO.LIFNR = BP.CD_BP 
			AND BP.CD_CLASE= 'P'	--Clase = P (Proveedor)
		  where NOT EKKO.LIFNR='' AND BP.CD_DW_BP IS NULL) Detl;
	COMMIT;
	
	SELECT MAX(CD_DW_BP) INTO P_BP FROM DIM_BPARTNER;
	
	insert into DIM_BPARTNER(CD_DW_BP,CD_BP)
	select  :P_BP + ROW_NUMBER() OVER (ORDER BY LLIEF) ID, LLIEF --Nuevos Suministradores
	from (	select distinct EKKO.LLIEF 
			from STG_ABAP_EKKO EKKO
			left join DIM_BPARTNER BP
				ON EKKO.LLIEF = BP.CD_BP
				AND BP.CD_CLASE= 'P'	--Clase = P (Proveedor)
			where NOT EKKO.LLIEF='' AND BP.CD_DW_BP IS NULL) Detl;
	COMMIT;
	
	SELECT MAX(CD_DW_BP) INTO P_BP FROM DIM_BPARTNER;
	
	insert into DIM_BPARTNER(CD_DW_BP,CD_BP)
	select  :P_BP + ROW_NUMBER() OVER (ORDER BY KUNNR) ID, KUNNR
	from (	select distinct EKKO.KUNNR 
			from STG_ABAP_EKKO EKKO
			left join DIM_BPARTNER BP
				ON EKKO.KUNNR = BP.CD_BP
				AND BP.CD_CLASE= 'C'	--Clase = C (Cliente)
			where NOT EKKO.KUNNR='' AND BP.CD_DW_BP IS NULL) Detl;
	COMMIT;
	

	TCOMPRA=SELECT  EK.EBELN, EK.EBELP, DC.CD_EJERCICIO, 28 CD_DW_EMPRESA,
					ifnull(DM.CD_DW_MATERIAL,0) AS CD_DW_MATERIAL, 
					EK.WERKS, EK.LGORT,EK.LMEIN, EK.MENGE, EK.MEINS, EK.BPRME,
					EK.NETPR, EK.PEINH, EK.NETWR, EK.BRTWR, EK.LOEKZ, EK.BWTAR,
					EK.BWTTY, EK.ELIKZ, EK.STATUS, EK.ABDAT, EK.ABFTZ	
			FROM STG_ABAP_EKPO EK
			INNER JOIN DIM_COMPRA DC ON EK.EBELN=DC.CD_EBELN
			LEFT JOIN DIM_MATERIAL DM ON EK.MATNR=DM.CD_MATERIAL;


	--Se actualiza el encabezado del documento compra con la cantidad de items cargados para no volver a cargar.
	MERGE INTO DIM_COMPRA D
	USING 	(SELECT EBELN,count(EBELN) conteo
			 FROM :TCOMPRA 
			 GROUP BY EBELN) S 
		ON S.EBELN = D.CD_EBELN
	WHEN MATCHED THEN UPDATE SET NU_ITEMS = S.conteo;
	COMMIT;

--Se actualiza las compras de la tabla ABAP
	MERGE INTO FT_COMPRA FT 
	USING ( SELECT	EBELN,
					EBELP,
					cast(substring(AEDAT,1,6) as int) CD_PERIODO,
					LOEKZ,MATNR,CD_DW_MATERIAL,BUKRS,WERKS,LGORT,MENGE,MEINS,BPRME,NETPR,PEINH,NETWR,ELIKZ,ABDAT,ABFTZ,LMEIN,STATUS,AEDAT,BRTWR,UMREZ
			FROM STG_ABAP_EKPO
			INNER JOIN DIM_MATERIAL 
				ON CD_MATERIAL = MATNR) ITM 
		ON FT.CD_EBELN = ITM.EBELN 
		AND FT.CD_ITEM = ITM.EBELP
		AND FT.CD_PERIODO = ITM.CD_PERIODO
	WHEN MATCHED THEN UPDATE 
		SET CD_CENTRO		=ITM.WERKS, 
			CD_LGORT		=ITM.LGORT,
			CD_BPRME		=ITM.BPRME,
			NU_MENGE		=ITM.MENGE, 
			CD_MEINS		=ITM.MEINS, 
		   	VL_NETPR		=ITM.NETPR,
		   	VL_BRTWR		=ITM.BRTWR,
		   	VL_PEINH		=ITM.PEINH, 
		   	VL_NETWR		=ITM.NETWR, 
		   	FL_LOEKZ		=ITM.LOEKZ, 
		   	FL_STATUS		=ITM.STATUS, 
		   	FL_ELIKZ		=ITM.ELIKZ,  
		   	FE_BEDAT		=ITM.AEDAT,
		   	NU_UMREZ		=ITM.UMREZ
	WHEN NOT MATCHED THEN INSERT  
		  (CD_EBELN, CD_ITEM, CD_EJERCICIO, CD_PERIODO, CD_DW_MATERIAL, CD_DW_EMPRESA, CD_CENTRO, CD_LGORT, NU_MENGE, CD_MEINS, 
		   VL_NETPR, VL_PEINH, VL_NETWR, FL_LOEKZ, FL_STATUS, FL_ELIKZ,  FE_BEDAT, NU_UMREZ)
	VALUES(ITM.EBELN, ITM.EBELP, ITM.CD_PERIODO, substring(ITM.AEDAT,1,6),ITM.CD_DW_MATERIAL, 28,ITM.WERKS,ITM.LGORT,ITM.MENGE,ITM.MEINS,
		   ITM.NETPR,ITM.PEINH,ITM.NETWR,ITM.LOEKZ,ITM.STATUS,ITM.ELIKZ,ITM.AEDAT, ITM.UMREZ);
	COMMIT;	   
		    
	Delta_Compra =  SELECT  ROW_NUMBER() OVER (PARTITION BY ITM.EBELN, ITM.EBELP ORDER BY ITM.SYDAT Desc, ITM.UZEIT DESC ) ULTIMO_REGISTRO,
							ITM.SYDAT, ITM.UZEIT, ITM.EBELN, ITM.EBELP, CAST(Substring(ITM.BEDAT,1,4) AS SMALLINT) EJERCICIO, 
							CAST(Substring(ITM.BEDAT,1,6) AS INT) PERIODO, MAT.CD_DW_MATERIAL,COALESCE(CECO.CD_DW_CECO,0) CD_DW_CECO,
							ITM.WERKS,ITM.LGORT,ITM.MENGE,ITM.MEINS,ITM.NETPR,ITM.PEINH,ITM.NETWR, ITM.STATU,ITM.ELIKZ,ITM.ROCANCEL,ITM.BEDAT, ITM.AKTWE, ITM.LFZTA, ITM.TABW, ITM.UMREZ  
					FROM STG_2LIS_02_ITM  ITM
					INNER JOIN DIM_MATERIAL MAT 
						ON MAT.CD_MATERIAL = ITM.MATNR
					LEFT JOIN DIM_CECO CECO  
						ON CECO.CD_CECO = ITM.ZZKOSTL AND NOT ZZKOSTL='';
				
	MERGE INTO FT_COMPRA FT 
	USING :Delta_Compra ITM 
		ON FT.CD_EBELN = ITM.EBELN 
		AND FT.CD_ITEM = ITM.EBELP
		AND FT.CD_PERIODO = ITM.PERIODO
	WHEN MATCHED AND ITM.ULTIMO_REGISTRO = 1 THEN UPDATE 
		SET CD_DW_CECO		=ITM.CD_DW_CECO, 
			CD_CENTRO		=ITM.WERKS, 
			CD_LGORT		=ITM.LGORT, 
			NU_MENGE		=ITM.MENGE, 
			CD_MEINS		=ITM.MEINS, 
		   	VL_NETPR		=ITM.NETPR, 
		   	VL_PEINH		=ITM.PEINH, 
		   	VL_NETWR		=ITM.NETWR, 
		   	FL_LOEKZ		=ITM.ROCANCEL, 
		   	FL_STATUS		=ITM.STATU, 
		   	FL_ELIKZ		=ITM.ELIKZ,  
		   	FE_BEDAT		=ITM.BEDAT,  
		   	NU_AKTWE		=ITM.AKTWE, 
		   	NU_LFZTA		=ITM.LFZTA,
		   	NU_TABW			=ITM.TABW,
		   	NU_UMREZ		=ITM.UMREZ
	WHEN NOT MATCHED AND ITM.ULTIMO_REGISTRO = 1 THEN INSERT  
		  (CD_EBELN, CD_ITEM, CD_EJERCICIO, CD_PERIODO, CD_DW_MATERIAL, CD_DW_EMPRESA, CD_DW_CECO, CD_CENTRO, CD_LGORT, NU_MENGE, CD_MEINS,NU_UMREZ, 
		   VL_NETPR, VL_PEINH, VL_NETWR, FL_LOEKZ, FL_STATUS, FL_ELIKZ,  FE_BEDAT,  NU_AKTWE, NU_LFZTA,NU_TABW)
	VALUES(ITM.EBELN, ITM.EBELP, ITM.EJERCICIO,ITM.PERIODO, ITM.CD_DW_MATERIAL, 28, ITM.CD_DW_CECO, ITM.WERKS,ITM.LGORT,ITM.MENGE,ITM.MEINS, ITM.UMREZ,
		   ITM.NETPR,ITM.PEINH,ITM.NETWR,ITM.ROCANCEL,ITM.STATU,ITM.ELIKZ,ITM.BEDAT, ITM.AKTWE, ITM.LFZTA, ITM.TABW);
	COMMIT;

	
	--Se borran los datos cargados en la FACT TABLE de la tabla temporal de Stage
	DELETE FROM STG_2LIS_02_ITM WHERE EBELN IN (SELECT Distinct EBELN FROM :Delta_Compra) OR MATNR='';
	COMMIT;
	
--Otros campos relevantes no solicitados:
--EREKZ, --Final Invoice Indicator
--BANFN, --Purchase Requisition Number
--BNFPO, --Item Number of Purchase Requisition
--ETENR	 --Schedule Line Counter	
--ETENR = '0002' Solo vienen items para el KZZ (Sol. Traslado de Ped.) 

--Se excluyen las fechas de entrega de los documentos KZZ (Sol. Traslado de Ped. CEDI->Tienda).

	--Los datos de entrega est치n filtrados para EKORG = '6A00' AND ELIKZ ='X'
	TENTREGA = 		SELECT 	ROW_NUMBER() OVER (PARTITION BY EBELN, EBELP ORDER BY SYDAT Desc, UZEIT, BUDAT DESC ) ULTIMO_REGISTRO,
							EBELN, 
							EBELP,
							cast(substring(BEDAT,1,6) as int) PERIODO,
							ELIKZ, --Final Delivery Indicator
							EINDT, --Item Delivery Date
							SLFDT  --Delivery Date Relevant for Statistics
					FROM STG_2LIS_02_SCL sls
					WHERE NOT EKGRP='KZZ' AND ETENR = '0001';
	
	--Actualizaci칩n de la Fecha de Entrega
	MERGE INTO FT_COMPRA A
	USING :TENTREGA F ON A.CD_EBELN 		= F.EBELN 
					 AND A.CD_ITEM 			= F.EBELP 
					 AND A.CD_PERIODO		= F.PERIODO
	WHEN MATCHED AND ULTIMO_REGISTRO=1 THEN UPDATE 
			SET FE_EINDT	= F.EINDT, 
				FE_SLFDT	= F.SLFDT,
				FL_ELIKZ	= F.ELIKZ;
	COMMIT;
	
	DELETE FROM STG_2LIS_02_SCL
	WHERE EBELN IN (SELECT Distinct EBELN FROM :TENTREGA);
	COMMIT;
	
	MERGE INTO FT_COMPRA COMPRA 
	USING (	SELECT 	FT.CD_EBELN, FT.CD_EBELP, FT.CD_PERIODO,
					SUM(CASE WHEN FT."FL_SHKZG"='H' THEN FT."NU_MENGE"*-1 ELSE FT."NU_MENGE" END) CANT_RECIBIDA,
					Max(FT.FE_FECHA) FECHA_CONTABILIZACION_DOC 
			FROM FT_COMPRA_INVENTARIO FT
			INNER JOIN (SELECT DISTINCT EBELN, EBELP FROM :TENTREGA WHERE ULTIMO_REGISTRO=1) STG 
				ON STG.EBELN = FT.CD_EBELN 
				AND STG.EBELP = FT.CD_EBELP
			GROUP BY FT.CD_PERIODO,FT.CD_EBELN, FT.CD_EBELP) DET 
		ON DET.CD_EBELN  = COMPRA.CD_EBELN  
		AND DET.CD_EBELP = COMPRA.CD_ITEM
		AND DET.CD_PERIODO = COMPRA.CD_PERIODO
	WHEN MATCHED 
		THEN UPDATE 
		SET NU_RECIBIDO 	  = CANT_RECIBIDA,
			FE_ULTIMA_ENTREGA = FECHA_CONTABILIZACION_DOC;
	COMMIT;
	
	INSERT INTO ETL_CONTROL_CARGUE(TABLA,TIPO_CARGA,FECHA_CARGA,BUKRS,GJAHR,BLART,BELNR_DESDE,BELNR_HASTA,ULTIMA_FECHA,REGISTROS_PROCESADOS)
	select 'FT_COMPRA',:pTipoCarga,add_seconds(now(),-18000),'6A00',Max(CD_EJERCICIO),'',Min(EBELN),Max(EBELN),Max(F.ABDAT),Count(EBELN)
	from :TCOMPRA F ;
	
	COMMIT;
	
END