PROCEDURE "SP_FT_MSEG_LOAD_V001"(pTipoCarga VARCHAR(1),pPeriodo int, pParticion int)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN
   /*************************************
	Carga de partidas individuales de movimientos de inventario
	Fecha de Creación: 20/03/2020
	Fecha de Modificación:23/03/2020
	Creado por: CORG-MREDONDO
	Modifica:CORG-JPIMIENTA
	Motivo cambio: Manejo de Deltas
	
	Stage table: STG_MSEG
	Hecho destino: FT_MSEG
   *************************************/
   
    Declare pID int;
	Declare pEjercicio INT;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM TDUMMY;
      
	--Se insertan los nuevos BP
	select Max(CD_DW_BP) into pID from "DIM_BPARTNER";
	
	insert into "DIM_BPARTNER"(CD_DW_BP,CD_BP)
	select  :pID + ROW_NUMBER() OVER (ORDER BY LIFNR) ID, LIFNR
	from (select distinct LIFNR from "STG_ABAP_MSEG"
		  where NOT LIFNR IN (select CD_BP from "DIM_BPARTNER")) Detl
	where LIFNR<>'';
	COMMIT;
	
	--Creación de datos escenciales de la cabecera del documento de MM si previamente no ha sido creado
	pEjercicio = CAST(substring(TO_VARCHAR(:pPeriodo,'0'),1,4) AS SMALLINT);
	
	INSERT INTO DIM_DOCMM(CD_MBLNR, CD_DW_EMPRESA,CD_EJERCICIO, CD_BELNR, CD_VGART, FE_BUDAT, CPUDTTM, USNAM, XBLNR,CD_TCODE2 )			
	SELECT	DISTINCT STG.MBLNR CD_MBLNR, (CASE WHEN STG.BUKRS='6A00' THEN 28 ELSE 0 END) CD_DW_EMPRESA, STG.MJAHR CD_EJERCICIO, STG.BELNR CD_BELNR, STG.VGART_MKPF CD_VGART, 
			STG.BUDAT_MKPF FE_BUDAT, STG.CPUDT_MKPF||STG.CPUTM_MKPF CPUDTTM, STG.USNAM_MKPF USNAM, STG.XBLNR_MKPF XBLNR, STG.TCODE2_MKPF CD_TCODE2
	FROM "STG_ABAP_MSEG"  STG 
	WHERE NOT MBLNR  IN (SELECT CD_MBLNR FROM DIM_DOCMM);
	COMMIT;	

	--Se actualizan los documentos que no son de KOBA para que no sean cargados o referenciados como documentos pendientes de carga.
	MERGE INTO DIM_DOCMM DIM 
	USING (	SELECT MBLNR, BUKRS, Count(MBLNR) Cant, MJAHR
			FROM STG_ABAP_MSEG	
			WHERE (BUKRS != '6A00') OR (BUKRS = '6A00' AND MATNR = '') --Si no es KOBA o es un documento que no tiene material, se actualiza con la cantidad de posiciones para no cargarlo.
			GROUP BY MBLNR, BUKRS, MJAHR) DET 
	ON  DIM.CD_MBLNR 	 = DET.MBLNR 
	AND DIM.CD_EJERCICIO = DET.MJAHR
	WHEN MATCHED THEN UPDATE 
	SET CD_DW_EMPRESA = 0, ITEMS = Cant;
	COMMIT;
	
	TMOV =  SELECT	F.MBLNR,M.CD_DW_MKPF,CAST(F.ZEILE AS SMALLINT) CD_ITEM,M."CD_EJERCICIO",M.CD_DW_EMPRESA,MAT.CD_DW_MATERIAL,ifnull(CB.CD_DW_CEBE,0) CD_DW_CEBE,ifnull(CC.CD_DW_CECO,0) CD_DW_CECO,ifnull(P.CD_DW_CUENTA,0) CD_DW_CUENTA,ifnull(B1."CD_DW_BP",0) CD_DW_LIFNR,ifnull(B2."CD_DW_BP",0) CD_DW_KUNNR,ifnull(B3."CD_DW_BP",0) CD_DW_EMLIF,"BUZEI",F.WERKS,F."BWART",F."LGORT",F."WAERS",
					F.MEINS,F.ERFME, F.BPRME, F.EBELN, F.EBELP, F.LFBNR, F.LFPOS, F.SMBLP, F.URZEI, F.LFBJA, F.SHKZG, F.ELIKZ, F.VPRSV,M."FE_BUDAT",F.SGTXT,F.MENGE,F.ERFMG,F.BPMNG,F.DMBTR,F.BNBTR,F.BUALT,F.LBKUM,F.SALK3, F.BUKRS,
					CAST(SUBSTRING(F.BUDAT_MKPF,1,6) AS INT) PERIODO,  F.MJAHR, F.BUSTM, F.LIFNR, F.KUNNR, F.EMLIF, F.GRUND
			FROM "STG_ABAP_MSEG" F 
			inner join DIM_DOCMM M	on F.MBLNR = M.CD_MBLNR AND M.CD_EJERCICIO = F.MJAHR
			inner join DIM_MATERIAL MAT on MAT.CD_MATERIAL = F.MATNR --MATNR Se filtra porque en la tabla hay activos y el proceso no está para guardar el movimiento de activos
			left join DIM_CECO CC on CC.CD_CECO = F.KOSTL
			left join DIM_CEBE_PRCTR CB on CB.CD_CEBE = F.PPRCTR
			left join DIM_CUENTA P on P.CD_CUENTA = F.SAKTO
			left join DIM_BPARTNER B1 on B1.CD_BP = F.LIFNR AND B1.CD_CLASE='P'
			left join DIM_BPARTNER B2 on B2.CD_BP = F.KUNNR AND B2.CD_CLASE='C'
			left join DIM_BPARTNER B3 on B3.CD_BP = F.EMLIF AND B3.CD_CLASE='P'
			WHERE F.BUKRS='6A00'; --Líneas que no han sido previamente cargadas ITEMS=-1 en DIM_DOCMM

	MERGE INTO "FT_MSEG" PARTITION(:pParticion) A
	USING :TMOV F 
			ON A.CD_DW_MKPF = F.CD_DW_MKPF 
			AND A.CD_ITEM   = F.CD_ITEM
	WHEN MATCHED AND F.PERIODO =:pPeriodo THEN UPDATE SET
		CD_DW_CEBE   = F.CD_DW_CEBE,
		CD_DW_CECO   = F.CD_DW_CECO,
		CD_DW_CUENTA = F.CD_DW_CUENTA,
		CD_DW_LIFNR  = F.CD_DW_LIFNR,
		CD_DW_KUNNR  =F.CD_DW_KUNNR,
		CD_DW_EMLIF  =F.CD_DW_EMLIF,
		CD_DW_BUZEI  =F.BUZEI,
		CD_BPRME	 =F.BPRME,
		CD_LFPOS	 =F.LFPOS,
		CD_SMBLP	 =F.SMBLP,
		CD_URZEI	 =F.URZEI,
		CD_LFBNR	 =F.LFBNR, 
		CD_LFBJA	 =F.LFBJA,
		FL_VPRSV	 =F.VPRSV,
		FL_ELIKZ	 =F.ELIKZ,
		SGTXT		 =F.SGTXT,
		NU_BPMNG	 =F.BPMNG,
		VL_BUALT	 =F.BUALT,
		VL_LBKUM	 =F.LBKUM,
		VL_SALK3	 =F.SALK3,
		CD_BUSTM	 =F.BUSTM,
		CD_KUNNR	 =F.KUNNR,
		CD_LIFNR	 =F.LIFNR,
		CD_EMLIF	 =F.EMLIF,
		CD_GRUND	 =F.GRUND   
	WHEN NOT MATCHED AND F.PERIODO=:pPeriodo THEN 
	INSERT ("CD_DW_MKPF","CD_ITEM","CD_PERIODO","CD_DW_EMPRESA","CD_DW_MATERIAL","CD_DW_CEBE","CD_DW_CECO","CD_DW_CUENTA",
			"CD_DW_LIFNR","CD_DW_KUNNR","CD_DW_EMLIF","CD_DW_BUZEI","CD_CENTRO","CD_BWART","CD_LGORT","CD_WAERS","CD_MEINS",
			"CD_ERFME","CD_BPRME","CD_EBELN","CD_EBELP","CD_LFBNR","CD_LFPOS","CD_SMBLP","CD_URZEI","CD_LFBJA","FL_SHKZG",
			"FL_ELIKZ","FL_VPRSV","FE_FECHA","SGTXT","NU_MENGE","NU_ERFMG","NU_BPMNG","VL_DMBTR","VL_BNBTR","VL_BUALT",
			"VL_LBKUM","VL_SALK3", "CD_BUSTM", "CD_KUNNR", "CD_LIFNR", "CD_EMLIF","CD_GRUND") 
	VALUES (F.CD_DW_MKPF,F.CD_ITEM,F.PERIODO,F.CD_DW_EMPRESA,F.CD_DW_MATERIAL,F.CD_DW_CEBE,F.CD_DW_CECO,F.CD_DW_CUENTA,
			F.CD_DW_LIFNR,F.CD_DW_KUNNR,F.CD_DW_EMLIF,F."BUZEI",F.WERKS,F."BWART",F."LGORT",F."WAERS",
			F.MEINS,F.ERFME, F.BPRME, F.EBELN, F.EBELP, F.LFBNR, F.LFPOS, F.SMBLP, F.URZEI, F.LFBJA, F.SHKZG, F.ELIKZ, F.VPRSV,
			F."FE_BUDAT",F.SGTXT,F.MENGE,F.ERFMG,F.BPMNG,F.DMBTR,F.BNBTR,F.BUALT,F.LBKUM,F.SALK3, F.BUSTM, F.KUNNR, F.LIFNR, F.EMLIF, F.GRUND); 
	COMMIT;
	
	MERGE INTO DIM_DOCMM DIM 
	USING (	SELECT MBLNR, BUKRS, Count(MBLNR) Cant, MJAHR 
			FROM :TMOV
			WHERE PERIODO=:pPeriodo
			GROUP BY MBLNR, BUKRS, MJAHR) DET 
	ON  DIM.CD_MBLNR 	 = DET.MBLNR 
	AND DIM.CD_EJERCICIO = DET.MJAHR
	WHEN MATCHED AND DET.MJAHR =:pEjercicio THEN UPDATE 
	SET CD_DW_EMPRESA = 28,	
		ITEMS = Cant;

	insert into ETL_CONTROL_CARGUE(TABLA,TIPO_CARGA,FECHA_CARGA,BUKRS,GJAHR,BLART,BELNR_DESDE,BELNR_HASTA,ULTIMA_FECHA,REGISTROS_PROCESADOS)
	select 'FT_MSEG',:pTipoCarga,add_seconds(now(),-18000),BUKRS,Max(CD_EJERCICIO),'',Min(MBLNR),Max(MBLNR),Max(F."FE_BUDAT"),Count(CD_DW_MKPF)
	from :TMOV F 
	group by BUKRS;
	
	
	COMMIT;
	
END